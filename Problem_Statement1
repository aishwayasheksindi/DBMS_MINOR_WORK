1.Write a C program to demonstrate all file operations related to ‘SYSTEM CALLS’ supported by unix OS and libraries for file operation.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <errno.h>
#include <string.h>

int main() {
    // File creation and opening
    int fd = open("my_file.txt", O_CREAT | O_WRONLY | O_TRUNC, 0644);
    if (fd == -1) {
        perror("open");
        exit(EXIT_FAILURE);
    }

    // Writing data to the file
    char data[] = "Hello, world!\n";
    ssize_t bytes_written = write(fd, data, strlen(data));
    if (bytes_written == -1) {
        perror("write");
        exit(EXIT_FAILURE);
    }

    // Closing the file
    close(fd);

    // Reopening the file for reading
    fd = open("my_file.txt", O_RDONLY);
    if (fd == -1) {
        perror("open");
        exit(EXIT_FAILURE);
    }

    // Reading data from the file
    char buffer[100];
    ssize_t bytes_read = read(fd, buffer, sizeof(buffer));
    if (bytes_read == -1) {
        perror("read");
        exit(EXIT_FAILURE);
    }

    // Printing the read data
    printf("Read data: %s\n", buffer);

    // Seeking within the file
    lseek(fd, 0, SEEK_SET);

    // Reading the first 5 bytes
    bytes_read = read(fd, buffer, 5);
    if (bytes_read == -1) {
        perror("read");
        exit(EXIT_FAILURE);
    }

    // Printing the partial data
    printf("First 5 bytes: %s\n", buffer);

    // Obtaining file attributes
    struct stat st;
    if (fstat(fd, &st) == -1) {
        perror("fstat");
        exit(EXIT_FAILURE);
    }

    printf("File size: %ld bytes\n", st.st_size);
    printf("File permissions: %o\n", st.st_mode);

    // Closing the file
    close(fd);

    // Removing the file
    if (remove("my_file.txt") == -1) {
        perror("remove");
        exit(EXIT_FAILURE);
    }

    return 0;
}

OUTPUT  :
Read data: Hello, world!
First 5 bytes: Hello, world!
File size: 15 bytes
File permissions: 100666
